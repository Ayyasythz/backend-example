// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks_repository

import (
	context "context"
	model "sagara_backend_test/internal/domain/model"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// WardrobeRepository is an autogenerated mock type for the WardrobeRepository type
type WardrobeRepository struct {
	mock.Mock
}

// AddStock provides a mock function with given fields: ctx, id, addition
func (_m *WardrobeRepository) AddStock(ctx context.Context, id *uuid.UUID, addition int) error {
	ret := _m.Called(ctx, id, addition)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, int) error); ok {
		r0 = rf(ctx, id, addition)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *WardrobeRepository) Delete(ctx context.Context, id *uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *WardrobeRepository) GetAll(ctx context.Context) (*[]model.Wardrobe, error) {
	ret := _m.Called(ctx)

	var r0 *[]model.Wardrobe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*[]model.Wardrobe, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *[]model.Wardrobe); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Wardrobe)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAvailable provides a mock function with given fields: ctx
func (_m *WardrobeRepository) GetAvailable(ctx context.Context) (*[]model.Wardrobe, error) {
	ret := _m.Called(ctx)

	var r0 *[]model.Wardrobe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*[]model.Wardrobe, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *[]model.Wardrobe); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Wardrobe)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *WardrobeRepository) GetById(ctx context.Context, id *uuid.UUID) (*model.Wardrobe, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Wardrobe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID) (*model.Wardrobe, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID) *model.Wardrobe); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wardrobe)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLessThan provides a mock function with given fields: ctx, amount
func (_m *WardrobeRepository) GetLessThan(ctx context.Context, amount int) (*[]model.Wardrobe, error) {
	ret := _m.Called(ctx, amount)

	var r0 *[]model.Wardrobe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*[]model.Wardrobe, error)); ok {
		return rf(ctx, amount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *[]model.Wardrobe); ok {
		r0 = rf(ctx, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Wardrobe)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnavailable provides a mock function with given fields: ctx
func (_m *WardrobeRepository) GetUnavailable(ctx context.Context) (*[]model.Wardrobe, error) {
	ret := _m.Called(ctx)

	var r0 *[]model.Wardrobe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*[]model.Wardrobe, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *[]model.Wardrobe); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Wardrobe)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, wardrobe
func (_m *WardrobeRepository) Insert(ctx context.Context, wardrobe *model.Wardrobe) error {
	ret := _m.Called(ctx, wardrobe)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Wardrobe) error); ok {
		r0 = rf(ctx, wardrobe)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Search provides a mock function with given fields: ctx, color, size
func (_m *WardrobeRepository) Search(ctx context.Context, color string, size string) (*[]model.Wardrobe, error) {
	ret := _m.Called(ctx, color, size)

	var r0 *[]model.Wardrobe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*[]model.Wardrobe, error)); ok {
		return rf(ctx, color, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *[]model.Wardrobe); ok {
		r0 = rf(ctx, color, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Wardrobe)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, color, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubStock provides a mock function with given fields: ctx, id, def
func (_m *WardrobeRepository) SubStock(ctx context.Context, id *uuid.UUID, def int) error {
	ret := _m.Called(ctx, id, def)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, int) error); ok {
		r0 = rf(ctx, id, def)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, wardrobe
func (_m *WardrobeRepository) Update(ctx context.Context, wardrobe *model.Wardrobe) error {
	ret := _m.Called(ctx, wardrobe)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Wardrobe) error); ok {
		r0 = rf(ctx, wardrobe)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWardrobeRepository creates a new instance of WardrobeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWardrobeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *WardrobeRepository {
	mock := &WardrobeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
